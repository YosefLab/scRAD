% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modules.R
\name{get.repro.idr.adjacency}
\alias{get.repro.idr.adjacency}
\title{Reproducible Module analysis: IDR-Based Molecule Adjacency Matrix}
\usage{
get.repro.idr.adjacency(x, r, mad_constant = 1.4826, var_thresh = 10^-5,
  pair_ithresh = 0.01, idr_mu = 1, idr_sigma = 0.5, idr_rho = 0.5,
  idr_p = 0.5, ...)
}
\arguments{
\item{x}{an n by m numeric matrix, where m = num of samples, n = num of 
molecules. Numerical values representing the expression level of the 
molecule.}

\item{r}{factor. Sample replicate identity.}

\item{mad_constant}{scale factor passed to \code{\link[stats]{mad}} in 
scaling z-transformed correlation coefficients.}

\item{var_thresh}{numeric. Molecules are only analyzed if their variance is 
greater than this threshold in all replicate groups.}

\item{pair_ithresh}{numeric. Molecule pairs are called "reproducibly 
correlated" if their z-value corresponds to a two-sided p-value exhibiting
IDR below this threshold.}

\item{idr_mu}{a starting value for idr mean (see
\code{\link[scider]{est.IDRm}}).}

\item{idr_sigma}{a starting value for the idr standard deviation (see
\code{\link[scider]{est.IDRm}}).}

\item{idr_rho}{a starting value for the idr correlation coefficient (see
\code{\link[scider]{est.IDRm}}).}

\item{idr_p}{a starting value for the proportion of the reproducible tests
(see \code{\link[scider]{est.IDRm}}).}

\item{...}{additional arguments passed to \code{\link[scider]{est.IDRm}}.}
}
\value{
Sparse adjacency matrix (\code{\link[Matrix]{dgCMatrix-class}}) with
  logical is_variable attribute flagging genes included in analysis.
}
\description{
Generate molecule-molecule adjacency matrix for molecule pairs exhibiting 
reproducible correlations across patients.
}
\examples{
library("SummarizedExperiment")
data("fluidigm",package = "scRNAseq")

x = assay(fluidigm)[sample(x = seq_len(nrow(fluidigm)),size = 50),]
r = factor(fluidigm$Coverage_Type)
A = get.repro.idr.adjacency(x,r)

library("igraph")
g = graph.adjacency(A, mode = "undirected")

hist(degree(g))
}
